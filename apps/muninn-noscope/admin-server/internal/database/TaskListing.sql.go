// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: TaskListing.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const countTasks = `-- name: CountTasks :one
SELECT COUNT(*)
FROM tasks
WHERE 
    ($1::uuid IS NULL OR object_id = $1::uuid) AND
    ($2::text = '' OR status = $2::text)
`

type CountTasksParams struct {
	Column1 *uuid.UUID `json:"column_1"`
	Column2 string     `json:"column_2"`
}

func (q *Queries) CountTasks(ctx context.Context, arg CountTasksParams) (int64, error) {
	row := q.queryRow(ctx, q.countTasksStmt, countTasks, arg.Column1, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, object_id, status, input, output, error, created_at, started_at, completed_at
FROM tasks
WHERE 
    ($1::uuid IS NULL OR object_id = $1::uuid) AND
    ($2::text = '' OR status = $2::text)
ORDER BY created_at DESC
LIMIT $3
OFFSET $4
`

type ListTasksParams struct {
	Column1 *uuid.UUID `json:"column_1"`
	Column2 string     `json:"column_2"`
	Limit   int32      `json:"limit"`
	Offset  int32      `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.query(ctx, q.listTasksStmt, listTasks,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ObjectID,
			&i.Status,
			&i.Input,
			&i.Output,
			&i.Error,
			&i.CreatedAt,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
