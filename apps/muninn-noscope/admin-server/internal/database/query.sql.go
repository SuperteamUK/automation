// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const countObjects = `-- name: CountObjects :one
SELECT COUNT(*)
FROM objects
`

func (q *Queries) CountObjects(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countObjectsStmt, countObjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTasks = `-- name: CountTasks :one
SELECT COUNT(*)
FROM tasks
WHERE 
    ($1::uuid IS NULL OR object_id = $1::uuid) AND
    ($2::text = '' OR status = $2::text)
`

type CountTasksParams struct {
	Column1 *uuid.UUID `json:"column_1"`
	Column2 string     `json:"column_2"`
}

func (q *Queries) CountTasks(ctx context.Context, arg CountTasksParams) (int64, error) {
	row := q.queryRow(ctx, q.countTasksStmt, countTasks, arg.Column1, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createObject = `-- name: CreateObject :one
INSERT INTO objects (id)
VALUES ($1)
RETURNING id, created_at, last_synced_at
`

func (q *Queries) CreateObject(ctx context.Context, id *uuid.UUID) (Object, error) {
	row := q.queryRow(ctx, q.createObjectStmt, createObject, id)
	var i Object
	err := row.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    object_id,
    status,
    input
) VALUES (
    $1,
    'pending',
    $2
)
RETURNING id, object_id, status, input, output, error, created_at, started_at, completed_at
`

type CreateTaskParams struct {
	ObjectID *uuid.UUID      `json:"object_id"`
	Input    json.RawMessage `json:"input"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.queryRow(ctx, q.createTaskStmt, createTask, arg.ObjectID, arg.Input)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ObjectID,
		&i.Status,
		&i.Input,
		&i.Output,
		&i.Error,
		&i.CreatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getObject = `-- name: GetObject :one
SELECT id, created_at, last_synced_at FROM objects
WHERE id = $1
`

func (q *Queries) GetObject(ctx context.Context, id *uuid.UUID) (Object, error) {
	row := q.queryRow(ctx, q.getObjectStmt, getObject, id)
	var i Object
	err := row.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt)
	return i, err
}

const listObjects = `-- name: ListObjects :many
SELECT id, created_at, last_synced_at
FROM objects
ORDER BY last_synced_at DESC NULLS LAST
LIMIT $1
OFFSET $2
`

type ListObjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListObjects(ctx context.Context, arg ListObjectsParams) ([]Object, error) {
	rows, err := q.query(ctx, q.listObjectsStmt, listObjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, object_id, status, input, output, error, created_at, started_at, completed_at
FROM tasks
WHERE 
    ($1::uuid IS NULL OR object_id = $1::uuid) AND
    ($2::text = '' OR status = $2::text)
ORDER BY created_at DESC
LIMIT $3
OFFSET $4
`

type ListTasksParams struct {
	Column1 *uuid.UUID `json:"column_1"`
	Column2 string     `json:"column_2"`
	Limit   int32      `json:"limit"`
	Offset  int32      `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.query(ctx, q.listTasksStmt, listTasks,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ObjectID,
			&i.Status,
			&i.Input,
			&i.Output,
			&i.Error,
			&i.CreatedAt,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateObjectLastSyncedAt = `-- name: UpdateObjectLastSyncedAt :one
UPDATE objects
SET last_synced_at = $2
WHERE id = $1
RETURNING id, created_at, last_synced_at
`

type UpdateObjectLastSyncedAtParams struct {
	ID           *uuid.UUID   `json:"id"`
	LastSyncedAt sql.NullTime `json:"last_synced_at"`
}

func (q *Queries) UpdateObjectLastSyncedAt(ctx context.Context, arg UpdateObjectLastSyncedAtParams) (Object, error) {
	row := q.queryRow(ctx, q.updateObjectLastSyncedAtStmt, updateObjectLastSyncedAt, arg.ID, arg.LastSyncedAt)
	var i Object
	err := row.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt)
	return i, err
}
