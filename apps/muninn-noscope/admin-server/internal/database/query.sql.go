// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countObjects = `-- name: CountObjects :one
SELECT COUNT(*)
FROM objects
`

func (q *Queries) CountObjects(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countObjectsStmt, countObjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createObject = `-- name: CreateObject :one
INSERT INTO objects (id)
VALUES ($1)
RETURNING id, created_at, last_synced_at
`

func (q *Queries) CreateObject(ctx context.Context, id *uuid.UUID) (Object, error) {
	row := q.queryRow(ctx, q.createObjectStmt, createObject, id)
	var i Object
	err := row.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt)
	return i, err
}

const createScanLog = `-- name: CreateScanLog :exec
INSERT INTO object_scan_logs (latest) 
VALUES ($1)
`

func (q *Queries) CreateScanLog(ctx context.Context, latest sql.NullTime) error {
	_, err := q.exec(ctx, q.createScanLogStmt, createScanLog, latest)
	return err
}

const getLatestScanTime = `-- name: GetLatestScanTime :one
SELECT latest 
FROM object_scan_logs 
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetLatestScanTime(ctx context.Context) (sql.NullTime, error) {
	row := q.queryRow(ctx, q.getLatestScanTimeStmt, getLatestScanTime)
	var latest sql.NullTime
	err := row.Scan(&latest)
	return latest, err
}

const getObject = `-- name: GetObject :one
SELECT id, created_at, last_synced_at FROM objects
WHERE id = $1
`

func (q *Queries) GetObject(ctx context.Context, id *uuid.UUID) (Object, error) {
	row := q.queryRow(ctx, q.getObjectStmt, getObject, id)
	var i Object
	err := row.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt)
	return i, err
}

const healthCheck = `-- name: HealthCheck :one
Select 1
`

func (q *Queries) HealthCheck(ctx context.Context) (int32, error) {
	row := q.queryRow(ctx, q.healthCheckStmt, healthCheck)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const listObjects = `-- name: ListObjects :many
SELECT id, created_at, last_synced_at
FROM objects
ORDER BY last_synced_at DESC NULLS LAST
LIMIT $1
OFFSET $2
`

type ListObjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListObjects(ctx context.Context, arg ListObjectsParams) ([]Object, error) {
	rows, err := q.query(ctx, q.listObjectsStmt, listObjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const objectsSyncLast60days = `-- name: ObjectsSyncLast60days :many
SELECT id, created_at, last_synced_at
FROM objects
WHERE last_synced_at > NOW() - INTERVAL '60 days'
`

func (q *Queries) ObjectsSyncLast60days(ctx context.Context) ([]Object, error) {
	rows, err := q.query(ctx, q.objectsSyncLast60daysStmt, objectsSyncLast60days)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateObjectLastSyncedAt = `-- name: UpdateObjectLastSyncedAt :one
UPDATE objects
SET last_synced_at = $2
WHERE id = $1
RETURNING id, created_at, last_synced_at
`

type UpdateObjectLastSyncedAtParams struct {
	ID           *uuid.UUID   `json:"id"`
	LastSyncedAt sql.NullTime `json:"last_synced_at"`
}

func (q *Queries) UpdateObjectLastSyncedAt(ctx context.Context, arg UpdateObjectLastSyncedAtParams) (Object, error) {
	row := q.queryRow(ctx, q.updateObjectLastSyncedAtStmt, updateObjectLastSyncedAt, arg.ID, arg.LastSyncedAt)
	var i Object
	err := row.Scan(&i.ID, &i.CreatedAt, &i.LastSyncedAt)
	return i, err
}
